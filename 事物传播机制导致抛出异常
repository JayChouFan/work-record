嵌套事物方法调用
method A(){
  method B();
}
两个方法注解都是@Transactional(rollbackFor = Exception.class)
方法B在校验失败的时候会抛出运行时异常，原来的逻辑是方法B抛出异常就结束了。现有逻辑是当方法B失败后A继续执行，所以处理方案是对方法B做了try-catch
method A(){
  try{
   method B();
  }catch{
  }
}
但是在运行的时候如果B抛出了异常，程序就执行失败了。
查阅资料后发现是事务传播属性导致的问题，@Transactional默认的事物传播属性是REQUIRED。这种传播属性会在内层事务失败时回滚外层事务，这里方法B抛出的异常虽然
被方法A catch住了，但是由于B抛出的异常触发了B上内层事务的回滚，并触发了外层事务的回滚。将传播属性改为NESTED，该属性在内层事务回滚后不会导致外层事务的回
滚，从而解决了问题。
